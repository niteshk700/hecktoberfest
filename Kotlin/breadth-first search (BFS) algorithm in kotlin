import java.util.*

class Graph(val vertices: Int) {
    private val adjacencyList: Array<MutableList<Int>> = Array(vertices) { mutableListOf() }

    fun addEdge(u: Int, v: Int) {
        adjacencyList[u].add(v)
    }

    fun bfs(startingVertex: Int) {
        val visited = BooleanArray(vertices)
        val queue = LinkedList<Int>()

        visited[startingVertex] = true
        queue.add(startingVertex)

        while (queue.isNotEmpty()) {
            val currentVertex = queue.poll()
            print("$currentVertex ")

            for (neighbor in adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true
                    queue.add(neighbor)
                }
            }
        }
    }
}

fun main() {
    val graph = Graph(8)

    // Add edges to the graph
    graph.addEdge(0, 1)
    graph.addEdge(0, 2)
    graph.addEdge(1, 3)
    graph.addEdge(1, 4)
    graph.addEdge(2, 5)
    graph.addEdge(2, 6)
    graph.addEdge(3, 7)

    println("Breadth-First Traversal (starting from vertex 0):")
    graph.bfs(0)
}

